(__ONE_lib_importlib := __import__('importlib')) and False or ((__ONE_lib_contextlib := __import__('contextlib')) and False or ((__ONE_sync_try := type('__ONE_cls_sync_try', (__ONE_lib_contextlib.ContextDecorator,), {'__enter__': lambda self: self, '__exit__': lambda self, *exc: (bool(print('Error!' + repr(exc))) and False if exc[0] != __ONE_cls_ReturnObject else bool(setattr(exc[1].fn, '__ONE_var_retval', exc[1].val)) or True) if exc != (None,) * 3 else False})) and False or ((__ONE_cls_ReturnObject := type('__ONE_cls_ReturnObject', (BaseException,), {'__init__': lambda self, function, value: [setattr(self, 'fn', function), setattr(self, 'val', value), None][-1]})) and False or ((__ONE_sync_i_op := (lambda a, b, im, m, rm: result if callable((mim := getattr(a, im, None))) and (result := mim(b)) is not NotImplemented else result if callable((mm := getattr(a, m, None))) and (result := mm(b)) is not NotImplemented else result if callable((mrm := getattr(b, rm, None))) and (result := mrm(a)) is not NotImplemented else print(f'ERROR: CANNOT ADD {a} AND {b} ({type(a)}, {type(b)})') or NotImplemented)) and False or ((copy := __ONE_lib_importlib.import_module('copy')) and False or ((jsd := type('jsd', (dict,), {'__init__': lambda *args, **kvargs: [(__ONE_var_realfunction := __ONE_sync_try()(lambda self, *args, **items: (super(jsd, self).__init__(args[0]) and False if len(args) == 1 and isinstance(args[0], dict) else super(jsd, self).__init__(items) and False if items and (not args) else super(jsd, self).__init__(*args) and False) and False)), __ONE_var_realfunction(*args, **kvargs), getattr(__ONE_var_realfunction, '__ONE_var_retval', None)][-1], '__deepcopy__': lambda *args, **kvargs: [(__ONE_var_realfunction := __ONE_sync_try()(lambda self, memodict={}: (__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, jsd.recurse(copy.deepcopy(dict(self), memo=memodict)))) and False)), __ONE_var_realfunction(*args, **kvargs), getattr(__ONE_var_realfunction, '__ONE_var_retval', None)][-1], '__copy__': lambda *args, **kvargs: [(__ONE_var_realfunction := __ONE_sync_try()(lambda self: (__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, jsd(self))) and False)), __ONE_var_realfunction(*args, **kvargs), getattr(__ONE_var_realfunction, '__ONE_var_retval', None)][-1], '__getattr__': lambda *args, **kvargs: [(__ONE_var_realfunction := __ONE_sync_try()(lambda self, name: (__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, self[name])) and False)), __ONE_var_realfunction(*args, **kvargs), getattr(__ONE_var_realfunction, '__ONE_var_retval', None)][-1], '__setattr__': lambda *args, **kvargs: [(__ONE_var_realfunction := __ONE_sync_try()(lambda self, name, value: ((__t1750279240989 := value) and False or (self.__setitem__(name, __t1750279240989) and False)) or ((__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, self)) and False))), __ONE_var_realfunction(*args, **kvargs), getattr(__ONE_var_realfunction, '__ONE_var_retval', None)][-1], 'recurse': staticmethod(lambda *args, **kvargs: [(__ONE_var_realfunction := __ONE_sync_try()(lambda d: (any((((__t1750279240989 := jsd.recurse(d[i])) and False or (d.__setitem__(i, __t1750279240989) and False) if isinstance(d[i], dict) else None) and False or (((__t1750279240989 := jsd.recurse(d[i])) and False or (d.__setitem__(i, __t1750279240989) and False) if isinstance(d[i], list) else None) and False or (((__t1750279240989 := jsd.recurse(d[i])) and False or (d.__setitem__(i, __t1750279240989) and False) if isinstance(d[i], tuple) else None) and False)) for i in range(len(d)))) or ((__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, d)) and False) if isinstance(d, list) else ((__t1750279240989 := jsd(d)) and False or ((a := __t1750279240989) and False)) or (any((((__t1750279240989 := jsd.recurse(a[i])) and False or (a.__setitem__(i, __t1750279240989) and False) if isinstance(a[i], dict) else (__t1750279240989 := jsd.recurse(a[i])) and False or (a.__setitem__(i, __t1750279240989) and False) if isinstance(a[i], list) else (__t1750279240989 := jsd.recurse(a[i])) and False or (a.__setitem__(i, __t1750279240989) and False) if isinstance(a[i], tuple) else None) and False for i in a.keys())) or ((__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, a)) and False)) if isinstance(d, dict) else ((__t1750279240989 := ([None] * len(d))) and False or ((a := __t1750279240989) and False)) or (any((((__t1750279240989 := jsd.recurse(d[i])) and False or (a.__setitem__(i, __t1750279240989) and False) if isinstance(d[i], dict) else (__t1750279240989 := jsd.recurse(d[i])) and False or (a.__setitem__(i, __t1750279240989) and False) if isinstance(d[i], list) else (__t1750279240989 := jsd.recurse(d[i])) and False or (a.__setitem__(i, __t1750279240989) and False) if isinstance(d[i], tuple) else (__t1750279240989 := d[i]) and False or (a.__setitem__(i, __t1750279240989) and False)) and False for i in range(len(d)))) or ((__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, tuple(a))) and False)) if isinstance(d, tuple) else None) and False or ((__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, d)) and False))), __ONE_var_realfunction(*args, **kvargs), getattr(__ONE_var_realfunction, '__ONE_var_retval', None)][-1])})) and False or (((__t1750279240989 := type('__ONE_trash', (dict,), {'__getattribute__': lambda s, x: s[x]})(globals().copy())) and False or ((common := __t1750279240989) and False)) or ((CompilationError := type('CompilationError', (Exception,), {'__init__': lambda *args, **kvargs: [(__ONE_var_realfunction := __ONE_sync_try()(lambda self, msg: super(CompilationError, self).__init__(msg) and False)), __ONE_var_realfunction(*args, **kvargs), getattr(__ONE_var_realfunction, '__ONE_var_retval', None)][-1]})) and False or (((__t1750279240989 := type('__ONE_trash', (dict,), {'__getattribute__': lambda s, x: s[x]})(globals().copy())) and False or ((exceptions := __t1750279240989) and False)) or ((CodeProvider := type('CodeProvider', (), {'custom_header': lambda *args, **kvargs: [(__ONE_var_realfunction := __ONE_sync_try()(lambda self: (__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, [])) and False)), __ONE_var_realfunction(*args, **kvargs), getattr(__ONE_var_realfunction, '__ONE_var_retval', None)][-1], 'custom_imports': lambda *args, **kvargs: [(__ONE_var_realfunction := __ONE_sync_try()(lambda self: (__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, [])) and False)), __ONE_var_realfunction(*args, **kvargs), getattr(__ONE_var_realfunction, '__ONE_var_retval', None)][-1]})) and False or (((__t1750279240989 := type('__ONE_trash', (dict,), {'__getattribute__': lambda s, x: s[x]})(globals().copy())) and False or ((code_provider := __t1750279240989) and False)) or ((re := __ONE_lib_importlib.import_module('re')) and False or ((tokenize := __ONE_lib_importlib.import_module('tokenize')) and False or ((ast := __ONE_lib_importlib.import_module('ast')) and False or ((io := __ONE_lib_importlib.import_module('io')) and False or ((random := __ONE_lib_importlib.import_module('random')) and False or ((time := __ONE_lib_importlib.import_module('time')) and False or ((StatementCompiler := type('StatementCompiler', (code_provider.CodeProvider,), {'__init__': lambda *args, **kvargs: [(__ONE_var_realfunction := __ONE_sync_try()(lambda self: (__t1750279240989 := str(random.randint(0, 999999999) + int(time.time() * 1000))) and False or (setattr(self, 'seed', __t1750279240989) and False))), __ONE_var_realfunction(*args, **kvargs), getattr(__ONE_var_realfunction, '__ONE_var_retval', None)][-1], 'custom_header': lambda *args, **kvargs: [(__ONE_var_realfunction := __ONE_sync_try()(lambda self: (__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, super(StatementCompiler, self).custom_header() + ['\n                (\n                    __ONE_sync_i_op := lambda a, b, im, m, rm:\n                    (\n                        (\n                            result\n                        )\n                        if callable(mim := getattr(a, im, None)) and (result := mim(b)) is not NotImplemented else\n                        (\n\n                            (\n                                result\n                            )\n                            if callable(mm := getattr(a, m, None)) and (result := mm(b)) is not NotImplemented else\n                            (\n                                (\n                                    result\n                                )\n                                if callable(mrm := getattr(b, rm, None)) and (result := mrm(a)) is not NotImplemented else\n                                (\n                                    print(f"ERROR: CANNOT ADD {a} AND {b} ({type(a)}, {type(b)})")\n                                    or\n                                    NotImplemented\n                                )\n                            )\n                        )\n                    )\n                )\n            '])) and False)), __ONE_var_realfunction(*args, **kvargs), getattr(__ONE_var_realfunction, '__ONE_var_retval', None)][-1], '_set_single': lambda *args, **kvargs: [(__ONE_var_realfunction := __ONE_sync_try()(lambda self, target, value: ((__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, f'setattr({ast.unparse(target.value)}, {repr(target.attr)}, {value}) and False')) and False if isinstance(target, ast.Attribute) else (__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, f'({ast.unparse(target.value)}).__setitem__({ast.unparse(target.slice)}, ({value})) and False')) and False if isinstance(target, ast.Subscript) else (__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, f'({target.id} := ({value})) and False')) and False if isinstance(target, ast.Name) else None) and False or ((__ONE_trash for __ONE_trash in '_').throw(ValueError('StatementCompiler._set_single wrong target.')) and False))), __ONE_var_realfunction(*args, **kvargs), getattr(__ONE_var_realfunction, '__ONE_var_retval', None)][-1], '_set_target': lambda *args, **kvargs: [(__ONE_var_realfunction := __ONE_sync_try()(lambda self, target, value: (((__t1750279240989 := f'(__t{self.seed}_i := iter({value})) and False') and False or ((exp := __t1750279240989) and False)) or (any((((__t1750279240989 := self._set_single(e, f'next(__t{self.seed}_i)')) and False or ((sets := __t1750279240989) and False)) or ((__t1750279240989 := f'({exp}) or (({sets}) and False)') and False or ((exp := __t1750279240989) and False)) for e in target.elts)) or ((__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, exp)) and False)) if isinstance(target, ast.Tuple) else (__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, self._set_single(target, value))) and False if isinstance(target, ast.Attribute) else (__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, self._set_single(target, value))) and False if isinstance(target, ast.Subscript) else (__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, self._set_single(target, value))) and False if isinstance(target, ast.Name) else None) and False or ((__ONE_trash for __ONE_trash in '_').throw(ValueError('StatementCompiler._set_target wrong target.')) and False))), __ONE_var_realfunction(*args, **kvargs), getattr(__ONE_var_realfunction, '__ONE_var_retval', None)][-1], 'compile': lambda *args, **kvargs: [(__ONE_var_realfunction := __ONE_sync_try()(lambda self, stm: ((__t1750279240989 := ast.parse(stm)) and False or ((tree := __t1750279240989) and False)) or (((__t1750279240989 := None) and False or ((assign := __t1750279240989) and False)) or (any(((((__ONE_trash for __ONE_trash in '_').throw(CompilationError('Error: Two assign nodes in one statement. [Impossible]')) and False if assign is not None else None) and False or ((__t1750279240989 := node) and False or ((assign := __t1750279240989) and False)) if isinstance(node, ast.Assign) or isinstance(node, ast.AugAssign) or isinstance(node, ast.AnnAssign) else None) and False for node in ast.walk(tree))) or (((((__t1750279240989 := ast.unparse(assign.value)) and False or ((value := __t1750279240989) and False)) or (((__t1750279240989 := {ast.Add: ('__iadd__', '__add__', '__radd__'), ast.Sub: ('__isub__', '__sub__', '__rsub__'), ast.Mult: ('__imul__', '__mul__', '__rmul__'), ast.Div: ('__itruediv__', '__truediv__', '__rtruediv__'), ast.FloorDiv: ('__ifloordiv__', '__floordiv__', '__rfloordiv__'), ast.Mod: ('__imod__', '__mod__', '__rmod__'), ast.Pow: ('__ipow__', '__pow__', '__rpow__'), ast.LShift: ('__ilshift__', '__lshift__', '__rlshift__'), ast.RShift: ('__irshift__', '__rshift__', '__rrshift__'), ast.BitAnd: ('__iand__', '__and__', '__rand__'), ast.BitXor: ('__ixor__', '__xor__', '__rxor__'), ast.BitOr: ('__ior__, __or_', '__ror_')}) and False or ((methods := __t1750279240989) and False)) or (((__t1750279240989 := assign.target) and False or ((target := __t1750279240989) and False)) or (((__t1750279240989 := ast.unparse(assign.target)) and False or ((str_target := __t1750279240989) and False)) or (((__t1750279240989 := methods[type(assign.op)]) and False or ((((__t1750279240989_i := iter(__t1750279240989)) and False or (((i_method := next(__t1750279240989_i)) and False) and False)) or (((method := next(__t1750279240989_i)) and False) and False)) or (((r_method := next(__t1750279240989_i)) and False) and False))) or (((__t1750279240989 := f"\n                    [\n                        __t{self.seed} := type({str_target}),\n                        (\n                            {self._set_single(target, f'__t{self.seed}_r')}\n                        )\n                        if (__t{self.seed}_r := __ONE_sync_i_op(({str_target}), ({value}), {repr(i_method)}, {repr(method)}, {repr(r_method)})) is not NotImplemented else\n                        (\n                            False\n                        )\n                    ].__len__() == 0\n                ") and False or ((exp := __t1750279240989) and False)) or ((__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, exp)) and False)))))) if isinstance(assign, ast.AugAssign) else ((__t1750279240989 := []) and False or ((targets := __t1750279240989) and False)) or (((__t1750279240989 := None) and False or ((value := __t1750279240989) and False)) or ((targets.append(assign.target) and False or (((__t1750279240989 := ast.get_source_segment(stm, assign.value)) and False or ((value := __t1750279240989) and False) if assign.value is not None else None) and False) if isinstance(assign, ast.AnnAssign) else targets.extend(assign.targets) and False or ((__t1750279240989 := ast.get_source_segment(stm, assign.value)) and False or ((value := __t1750279240989) and False))) and False or (((__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, None)) and False if value is None else None) and False or (((__t1750279240989 := [*map(lambda x: jsd(code=ast.get_source_segment(stm, x), ast=x), targets)]) and False or ((targets := __t1750279240989) and False)) or (((__t1750279240989 := f'__t{self.seed}') and False or ((value_var := __t1750279240989) and False)) or (((__t1750279240989 := f'({value_var} := ({value})) and False') and False or ((exp := __t1750279240989) and False)) or (any((((__t1750279240989 := self._set_target(t.ast, value_var)) and False or ((tset := __t1750279240989) and False)) or ((__t1750279240989 := f'({exp}) or ({tset})') and False or ((exp := __t1750279240989) and False)) for t in targets)) or ((__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, exp)) and False))))))))) and False if assign is not None else (__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, f'({stm}) and False')) and False) and False))))), __ONE_var_realfunction(*args, **kvargs), getattr(__ONE_var_realfunction, '__ONE_var_retval', None)][-1]})) and False or (((__t1750279240989 := type('__ONE_trash', (dict,), {'__getattribute__': lambda s, x: s[x]})(globals().copy())) and False or ((statement_compiler := __t1750279240989) and False)) or ((re := __ONE_lib_importlib.import_module('re')) and False or ((tokenize := __ONE_lib_importlib.import_module('tokenize')) and False or ((ast := __ONE_lib_importlib.import_module('ast')) and False or ((io := __ONE_lib_importlib.import_module('io')) and False or ((random := __ONE_lib_importlib.import_module('random')) and False or ((time := __ONE_lib_importlib.import_module('time')) and False or ('\n    "expression" base output must be False-equal.\n    becouse we will join expressions using "or"\n    operator, (arrays and tuples cause additional\n    space consumption and may be them are slower)\n' and False or ((BlockCompiler := type('BlockCompiler', (code_provider.CodeProvider,), {'__init__': lambda *args, **kvargs: [(__ONE_var_realfunction := __ONE_sync_try()(lambda self, statement_compiler: ((__t1750279240989 := statement_compiler) and False or (setattr(self, 'sc', __t1750279240989) and False)) or (((__t1750279240989 := '') and False or (setattr(self, 'filename', __t1750279240989) and False)) or (((__t1750279240989 := []) and False or (setattr(self, 'code', __t1750279240989) and False)) or ((__t1750279240989 := []) and False or (setattr(self, 'current_decorators', __t1750279240989) and False)))))), __ONE_var_realfunction(*args, **kvargs), getattr(__ONE_var_realfunction, '__ONE_var_retval', None)][-1], 'build': lambda *args, **kvargs: [(__ONE_var_realfunction := __ONE_sync_try()(lambda self, filename, code: ((__t1750279240989 := filename) and False or (setattr(self, 'filename', __t1750279240989) and False)) or (((__t1750279240989 := code.split('\n')) and False or (setattr(self, 'code', __t1750279240989) and False)) or ((__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, self.compile_block(0, 0))) and False)))), __ONE_var_realfunction(*args, **kvargs), getattr(__ONE_var_realfunction, '__ONE_var_retval', None)][-1], 'custom_imports': lambda *args, **kvargs: [(__ONE_var_realfunction := __ONE_sync_try()(lambda self: (__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, super(BlockCompiler, self).custom_imports() + self.sc.custom_imports() + ['contextlib', 'importlib'])) and False)), __ONE_var_realfunction(*args, **kvargs), getattr(__ONE_var_realfunction, '__ONE_var_retval', None)][-1], 'custom_header': lambda *args, **kvargs: [(__ONE_var_realfunction := __ONE_sync_try()(lambda self: (__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, super(BlockCompiler, self).custom_header() + self.sc.custom_header() + ['\n                __ONE_cls_ReturnObject := type("__ONE_cls_ReturnObject", (BaseException,),\n                {\n                    "__init__": lambda self, function, value: [setattr(self, "fn", function), setattr(self, "val", value), None][-1]\n                })\n            ', '\n                __ONE_sync_try := type("__ONE_cls_sync_try", (__ONE_lib_contextlib.ContextDecorator,),\n                {\n                    "__enter__": (lambda self: self),\n                    "__exit__": (lambda self, *exc:\n                    (\n                        (\n                            (\n                                bool(print("Error!"+repr(exc))) and False\n                            )\n                            if exc[0] != __ONE_cls_ReturnObject else\n                            (\n                                bool(setattr(exc[1].fn, "__ONE_var_retval", exc[1].val)) or True\n                            )\n                        )\n                        if exc != (None,)*3\n                        else False\n                    ))\n                })\n            '])) and False)), __ONE_var_realfunction(*args, **kvargs), getattr(__ONE_var_realfunction, '__ONE_var_retval', None)][-1], 'unpack_string': lambda *args, **kvargs: [(__ONE_var_realfunction := __ONE_sync_try()(lambda self, full_line: ((__t1750279240989 := (len(full_line) - len(full_line.lstrip(' ')))) and False or ((indent := __t1750279240989) and False)) or (((__t1750279240989 := full_line[indent:]) and False or ((line := __t1750279240989) and False)) or ((__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, (indent, line))) and False)))), __ONE_var_realfunction(*args, **kvargs), getattr(__ONE_var_realfunction, '__ONE_var_retval', None)][-1], 'compile_block': lambda *args, **kvargs: [(__ONE_var_realfunction := __ONE_sync_try()(lambda self, codeline, baseindent, *, new_block=False, class_body=False: (((__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, jsd(next=codeline, dict={}))) and False if class_body else (__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, jsd(next=codeline, code=None))) and False) and False if codeline >= len(self.code) else None) and False or (((__t1750279240989 := self.unpack_string(self.code[codeline])) and False or (((__t1750279240989_i := iter(__t1750279240989)) and False or (((indent := next(__t1750279240989_i)) and False) and False)) or (((line := next(__t1750279240989_i)) and False) and False))) or ((... and False or ((__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, self.compile_block(codeline + 1, baseindent, new_block=new_block, class_body=class_body))) and False) if line == '' else ((__t1750279240989 := indent) and False or ((baseindent := __t1750279240989) and False) if baseindent < indent else (__ONE_trash for __ONE_trash in '_').throw(CompilationError(f'{self.filename}:{codeline}:{indent}: empty block of code.')) and False if baseindent >= indent else None) and False if new_block else (__ONE_trash for __ONE_trash in '_').throw(CompilationError(f'{self.filename}:{codeline}:{indent}: Wrong indent uprising.')) and False if baseindent < indent else ((__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, jsd(next=codeline, dict={}))) and False if class_body else (__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, jsd(next=codeline, code=None))) and False) and False if baseindent > indent else None) and False or ((((__t1750279240989 := []) and False or ((branches := __t1750279240989) and False)) or (((__t1750279240989 := line[:line.rfind(':')].removeprefix('if').strip()) and False or ((exp := __t1750279240989) and False)) or (((__t1750279240989 := self.compile_block(codeline + 1, indent, new_block=True)) and False or ((if_true := __t1750279240989) and False)) or (((__t1750279240989 := if_true.next) and False or ((end_line := __t1750279240989) and False)) or (branches.append(jsd(exp=exp, code=if_true.code)) and False or (((__t1750279240989 := None) and False or ((end_indent := __t1750279240989) and False)) or (((__t1750279240989 := None) and False or ((end_code := __t1750279240989) and False)) or (((__t1750279240989 := True) and False or ((run := __t1750279240989) and False)) or (any((((__t1750279240989 := False) and False or ((run := __t1750279240989) and False) if end_line >= len(self.code) else ((__t1750279240989 := self.unpack_string(self.code[end_line])) and False or (((__t1750279240989_i := iter(__t1750279240989)) and False or (((end_indent := next(__t1750279240989_i)) and False) and False)) or (((end_code := next(__t1750279240989_i)) and False) and False))) or (((__t1750279240989 := False) and False or ((run := __t1750279240989) and False) if end_indent != indent or not end_code.startswith('elif') else ((__t1750279240989 := end_code[:end_code.rfind(':')].removeprefix('elif').strip()) and False or ((exp := __t1750279240989) and False)) or (((__t1750279240989 := self.compile_block(end_line + 1, indent, new_block=True)) and False or ((elif_true := __t1750279240989) and False)) or (branches.append(jsd(exp=exp, code=elif_true.code)) and False or ((__t1750279240989 := elif_true.next) and False or ((end_line := __t1750279240989) and False))))) and False)) and False for __ONE_trash in iter(lambda : run, False))) or (((__t1750279240989 := None) and False or ((else_code := __t1750279240989) and False)) or (((__t1750279240989 := end_line) and False or ((return_line := __t1750279240989) and False)) or (((__ONE_trash for __ONE_trash in '_').throw(CompilationError(f'{self.filename}:{end_line}:{indent}: Wrong indent uprising.')) and False if end_indent is not None and end_indent > indent else ... and False if end_indent is not None and end_indent < indent else ((__t1750279240989 := self.unpack_string(self.code[end_line])) and False or (((__t1750279240989_i := iter(__t1750279240989)) and False or (((end_indent := next(__t1750279240989_i)) and False) and False)) or (((end_code := next(__t1750279240989_i)) and False) and False))) or ((((__t1750279240989 := self.compile_block(end_line + 1, indent, new_block=True)) and False or ((else_res := __t1750279240989) and False)) or (((__t1750279240989 := else_res.code) and False or ((else_code := __t1750279240989) and False)) or ((__t1750279240989 := else_res.next) and False or ((return_line := __t1750279240989) and False))) if end_code.startswith('else') else None) and False) if end_line < len(self.code) else None) and False or (((__t1750279240989 := None) and False or ((following_code := __t1750279240989) and False)) or (((__t1750279240989 := self.compile_block(return_line, indent)) and False or ((follow := __t1750279240989) and False)) or (((__t1750279240989 := follow.code) and False or ((following_code := __t1750279240989) and False)) or (((__t1750279240989 := follow.next) and False or ((return_line := __t1750279240989) and False)) or (((__t1750279240989 := else_code) and False or ((exp := __t1750279240989) and False)) or (any(((__t1750279240989 := f'({b.code}) if ({b.exp}) else {exp}') and False or ((exp := __t1750279240989) and False) for b in branches[::-1])) or (((__t1750279240989 := f'({exp}) and False') and False or ((exp := __t1750279240989) and False)) or (((__t1750279240989 := f'({exp}) or ({following_code})') and False or ((exp := __t1750279240989) and False) if following_code is not None else None) and False or ((__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, jsd(next=return_line, code=exp))) and False)))))))))))))))))))) if line.startswith('if ') else ((__t1750279240989 := f'{line}...') and False or ((fake_code := __t1750279240989) and False)) or (((__t1750279240989 := ast.parse(fake_code)) and False or ((tree := __t1750279240989) and False)) or ((((__t1750279240989 := None) and False or ((vars_src := __t1750279240989) and False)) or ((iter_src := __t1750279240989) and False)) or (any(((((__t1750279240989 := ast.get_source_segment(fake_code, node.target)) and False or ((vars_src := __t1750279240989) and False)) or ((__t1750279240989 := ast.get_source_segment(fake_code, node.iter)) and False or ((iter_src := __t1750279240989) and False)) if isinstance(node, ast.For) else None) and False for node in ast.walk(tree))) or (((__ONE_trash for __ONE_trash in '_').throw(CompilationError(f"{self.filename}:{codeline}:{indent}: For cycle is wrong and wasn't parsed.")) and False if vars_src is None or iter_src is None else None) and False or (((__t1750279240989 := self.compile_block(codeline + 1, indent, new_block=True)) and False or ((body := __t1750279240989) and False)) or (((__t1750279240989 := self.compile_block(body.next, indent)) and False or ((follow := __t1750279240989) and False)) or (((__t1750279240989 := f'any((({body.code}) for {vars_src} in ({iter_src})))') and False or ((exp := __t1750279240989) and False)) or (((__t1750279240989 := f'({exp}) or ({follow.code})') and False or ((exp := __t1750279240989) and False) if follow.code is not None else None) and False or ((__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, jsd(next=follow.next, code=exp))) and False))))))))) if line.startswith('for ') else ((__t1750279240989 := line[:line.rfind(':')].removeprefix('while')) and False or ((exp := __t1750279240989) and False)) or (((__t1750279240989 := self.compile_block(codeline + 1, indent, new_block=True)) and False or ((body := __t1750279240989) and False)) or (((__t1750279240989 := self.compile_block(body.next, indent)) and False or ((follow := __t1750279240989) and False)) or (((__t1750279240989 := f'any((({body.code}) for __ONE_trash in iter(lambda: ({exp}), False)))') and False or ((exp := __t1750279240989) and False)) or (((__t1750279240989 := f'({exp}) or ({follow.code})') and False or ((exp := __t1750279240989) and False) if follow.code is not None else None) and False or ((__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, jsd(next=follow.next, code=exp))) and False))))) if line.startswith('while ') else ((__t1750279240989 := f'{line}...') and False or ((fake_code := __t1750279240989) and False)) or (((__t1750279240989 := ast.parse(fake_code)) and False or ((tree := __t1750279240989) and False)) or (((__t1750279240989 := []) and False or ((vars := __t1750279240989) and False)) or (any((((__t1750279240989 := node.items) and False or ((vars := __t1750279240989) and False) if isinstance(node, ast.With) else None) and False for node in ast.walk(tree))) or (((__t1750279240989 := []) and False or ((contexts1 := __t1750279240989) and False)) or (((__t1750279240989 := []) and False or ((contexts2 := __t1750279240989) and False)) or (any((((__t1750279240989 := ast.unparse(pair.context_expr)) and False or ((ctx := __t1750279240989) and False)) or ((((__t1750279240989 := f'(({ast.unparse(pair.optional_vars)} := ({ctx})), {ast.unparse(pair.optional_vars)}.__enter__())') and False or ((ctx1 := __t1750279240989) and False)) or ((__t1750279240989 := f'({ast.unparse(pair.optional_vars)}.__exit__(None, None, None))') and False or ((ctx2 := __t1750279240989) and False)) if pair.optional_vars is not None else None) and False or (contexts1.append(ctx1) and False or (contexts2.append(ctx2) and False))) for pair in vars)) or (((__ONE_trash for __ONE_trash in '_').throw(CompilationError(f'{self.filename}:{codeline}:{indent}: With statement without context managers.')) and False if len(contexts1) == 0 or len(contexts2) == 0 else None) and False or (((__t1750279240989 := f"[{','.join(map(lambda x: f'({x})', contexts1))}].__len__() == 0") and False or ((exp1 := __t1750279240989) and False)) or (((__t1750279240989 := f"[{','.join(map(lambda x: f'({x})', contexts2))}].__len__() == 0") and False or ((exp2 := __t1750279240989) and False)) or (((__t1750279240989 := self.compile_block(codeline + 1, indent, new_block=True)) and False or ((body := __t1750279240989) and False)) or (((__t1750279240989 := f'(({exp1}) or ({body.code})) or ({exp2})') and False or ((exp := __t1750279240989) and False)) or (((__t1750279240989 := self.compile_block(body.next, indent)) and False or ((follow := __t1750279240989) and False)) or (((__t1750279240989 := f'({exp}) or ({follow.code})') and False or ((exp := __t1750279240989) and False) if follow.code is not None else None) and False or ((__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, jsd(next=follow.next, code=exp))) and False)))))))))))))) if line.startswith('with ') else ((__t1750279240989 := line.removeprefix('import').split(',')) and False or ((modules := __t1750279240989) and False)) or (((__t1750279240989 := []) and False or ((data := __t1750279240989) and False)) or (any(((data.append(jsd(module=mod[0], name=mod[2])) and False if len(mod) == 3 and 'as' in mod else data.append(jsd(module=mod[0], name=mod[0])) and False if len(mod) == 1 else (__ONE_trash for __ONE_trash in '_').throw(CompilationError(f'{self.filename}:{codeline}:{0}: Wrong import ... statement.')) and False) and False for mod in map(str.split, modules))) or (((__t1750279240989 := '') and False or ((exp := __t1750279240989) and False)) or (any((((__t1750279240989 := f'(({mod.name} := __ONE_lib_importlib.import_module({repr(mod.module)})) and False)') and False or ((exp := __t1750279240989) and False) if exp == '' else (__t1750279240989 := f'({exp}) or (({mod.name} := __ONE_lib_importlib.import_module({repr(mod.module)})) and False)') and False or ((exp := __t1750279240989) and False)) and False for mod in data)) or (((__t1750279240989 := self.compile_block(codeline + 1, indent)) and False or ((follow := __t1750279240989) and False)) or (((__t1750279240989 := f'({exp}) or ({follow.code})') and False or ((exp := __t1750279240989) and False) if follow.code is not None else None) and False or ((__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, jsd(next=follow.next, code=exp))) and False))))))) if line.startswith('import ') else ((__t1750279240989 := line[:max(line.find(' import '), line.find(' import*'))].removeprefix('from').strip()) and False or ((base := __t1750279240989) and False)) or (((__t1750279240989 := line[max(line.find(' import '), line.find(' import*')):].lstrip().removeprefix('import').split(',')) and False or ((elements := __t1750279240989) and False)) or (((__t1750279240989 := []) and False or ((data := __t1750279240989) and False)) or (any(((data.append(jsd(element=e[0], name=e[2])) and False if len(e) == 3 and 'as' in e else data.append(jsd(element=e[0], name=e[0])) and False if len(e) == 1 else (__ONE_trash for __ONE_trash in '_').throw(CompilationError(f'{self.filename}:{codeline}:{0}: Wrong from ... import ... statement.')) and False) and False for e in map(str.split, elements))) or (((__t1750279240989 := f'(__ONE_import := __ONE_lib_importlib.import_module({repr(base)})) and False') and False or ((exp := __t1750279240989) and False)) or (any(((__t1750279240989 := f'({exp}) or (({e.name} := __ONE_import.{e.element}) and False)') and False or ((exp := __t1750279240989) and False) for e in data)) or (((__t1750279240989 := self.compile_block(codeline + 1, indent)) and False or ((follow := __t1750279240989) and False)) or (((__t1750279240989 := f'({exp}) or ({follow.code})') and False or ((exp := __t1750279240989) and False) if follow.code is not None else None) and False or ((__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, jsd(next=follow.next, code=exp))) and False)))))))) if line.startswith('from ') else ((__t1750279240989 := f"{line.removeprefix('async').lstrip()}...") and False or ((fake_code := __t1750279240989) and False)) or (((__t1750279240989 := ast.parse(fake_code)) and False or ((tree := __t1750279240989) and False)) or ((((__t1750279240989 := None) and False or ((name := __t1750279240989) and False)) or ((args := __t1750279240989) and False)) or (any(((((__t1750279240989 := node.args) and False or ((signature := __t1750279240989) and False)) or (((__t1750279240989 := []) and False or ((parts := __t1750279240989) and False)) or ((parts.extend(map(lambda x: x.arg, signature.posonlyargs)) and False or (parts.append('/') and False) if signature.posonlyargs else None) and False or (parts.extend(map(lambda x: x.arg, signature.args)) and False or ((parts.append(f'*{signature.vararg.arg}') and False if signature.vararg else parts.append('*') and False if signature.kwonlyargs else None) and False or (parts.extend(map(lambda x: x.arg, signature.kwonlyargs)) and False or ((parts.append(f'**{signature.kwarg.arg}') and False if signature.kwarg else None) and False or (((__t1750279240989 := (len(signature.posonlyargs) + len(signature.args))) and False or ((val_args_len := __t1750279240989) and False)) or (any(((__t1750279240989 := f'{parts[i]}={ast.unparse(default)}') and False or (parts.__setitem__(i, __t1750279240989) and False) for (i, default) in enumerate(signature.defaults, val_args_len - len(signature.defaults)))) or (((__t1750279240989 := (val_args_len + bool(signature.vararg or signature.kwonlyargs))) and False or ((offset := __t1750279240989) and False)) or (any((((__t1750279240989 := f'{parts[offset + i]}={ast.unparse(default)}') and False or (parts.__setitem__(offset + i, __t1750279240989) and False) if default is not None else None) and False for (i, default) in enumerate(signature.kw_defaults))) or (((__t1750279240989 := ', '.join(parts)) and False or ((args := __t1750279240989) and False)) or ((__t1750279240989 := node.name) and False or ((name := __t1750279240989) and False))))))))))))) if isinstance(node, ast.FunctionDef) else None) and False for node in ast.walk(tree))) or (((__ONE_trash for __ONE_trash in '_').throw(CompilationError(f'{self.filename}:{codeline}:{0}: Wrong def statement: [this exception impossible]')) and False if name is None or args is None else None) and False or (((__t1750279240989 := self.compile_block(codeline + 1, indent, new_block=True)) and False or ((body := __t1750279240989) and False)) or (((__t1750279240989 := self.compile_block(body.next, indent, class_body=class_body)) and False or ((follow := __t1750279240989) and False)) or (((__t1750279240989 := f"""\n                            lambda *args, **kvargs : (\n                                [\n                                    __ONE_var_realfunction := __ONE_sync_try()(lambda {args}: (({body.code}) for __ONE_trash in '_' if True or await fun()).__anext__())),\n                                    __ONE_var_realfunction(*args, **kvargs),\n                                    getattr(__ONE_var_realfunction, "__ONE_var_retval", None)\n                                ][-1]\n                            )\n                        """) and False or ((fn := __t1750279240989) and False) if line.startswith('async ') else (__t1750279240989 := f'\n                            lambda *args, **kvargs : (\n                                [\n                                    __ONE_var_realfunction := __ONE_sync_try()(lambda {args}: ({body.code})),\n                                    __ONE_var_realfunction(*args, **kvargs),\n                                    getattr(__ONE_var_realfunction, "__ONE_var_retval", None)\n                                ][-1]\n                            )\n                        ') and False or ((fn := __t1750279240989) and False)) and False or (any(((__t1750279240989 := f'{i}(({fn}))') and False or ((fn := __t1750279240989) and False) for i in self.current_decorators)) or (((__t1750279240989 := []) and False or (setattr(self, 'current_decorators', __t1750279240989) and False)) or (((__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, jsd(next=follow.next, dict={name: fn} | follow.dict))) and False if class_body else ((__t1750279240989 := f'({name} := {fn}) and False') and False or ((exp := __t1750279240989) and False)) or (((__t1750279240989 := f'({exp}) or ({follow.code})') and False or ((exp := __t1750279240989) and False) if follow.code is not None else None) and False or ((__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, jsd(next=follow.next, code=exp))) and False))) and False)))))))))) if line.startswith('def ') or line.startswith('async ') else ((__t1750279240989 := line.removeprefix('return')) and False or ((val := __t1750279240989) and False)) or (((__t1750279240989 := 'None') and False or ((val := __t1750279240989) and False) if val.strip() == '' else None) and False or (((__t1750279240989 := self.compile_block(codeline + 1, indent)) and False or ((follow := __t1750279240989) and False)) or (((__t1750279240989 := f"(__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, ({val}))) and False") and False or ((exp := __t1750279240989) and False)) or (((__t1750279240989 := f'({exp}) or ({follow.code})') and False or ((exp := __t1750279240989) and False) if follow.code is not None else None) and False or ((__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, jsd(next=follow.next, code=exp))) and False))))) if line.startswith('return ') or line == 'return' else ((__t1750279240989 := f'{line}...') and False or ((fake_code := __t1750279240989) and False)) or (((__t1750279240989 := ast.parse(fake_code)) and False or ((tree := __t1750279240989) and False)) or ((((__t1750279240989 := None) and False or ((name := __t1750279240989) and False)) or ((bases := __t1750279240989) and False)) or (any(((((__t1750279240989 := node.name) and False or ((name := __t1750279240989) and False)) or ((__t1750279240989 := (*map(ast.unparse, node.bases),)) and False or ((bases := __t1750279240989) and False)) if isinstance(node, ast.ClassDef) else None) and False for node in ast.walk(tree))) or (((__ONE_trash for __ONE_trash in '_').throw(CompilationError(f'{self.filename}:{codeline}:{0}: Wrong class statement: [this exception impossible]')) and False if name is None or bases is None else None) and False or (((__t1750279240989 := self.compile_block(codeline + 1, indent, new_block=True, class_body=True)) and False or ((body := __t1750279240989) and False)) or (((__t1750279240989 := ('{' + ','.join(map(lambda x: f'{repr(x[0])}:({x[1]})', body.dict.items())) + '}')) and False or ((cls_dict := __t1750279240989) and False)) or (((__t1750279240989 := ('(' + ''.join(map(lambda x: f'{x},', bases)) + ')')) and False or ((cls_bases := __t1750279240989) and False)) or (((__t1750279240989 := f'({name} := type({repr(name)}, {cls_bases}, {cls_dict})) and False') and False or ((exp := __t1750279240989) and False)) or (((__t1750279240989 := self.compile_block(body.next, indent)) and False or ((follow := __t1750279240989) and False)) or (((__t1750279240989 := f'({exp}) or ({follow.code})') and False or ((exp := __t1750279240989) and False) if follow.code is not None else None) and False or ((__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, jsd(next=follow.next, code=exp))) and False))))))))))) if line.startswith('class ') else self.current_decorators.append(line[1:]) and False or ((__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, self.compile_block(codeline + 1, indent, class_body=class_body))) and False) if line.startswith('@') else ((__t1750279240989 := line.removeprefix('raise')) and False or ((value := __t1750279240989) and False)) or (((__t1750279240989 := f"(__ONE_trash for __ONE_trash in '_').throw({value}) and False") and False or ((exp := __t1750279240989) and False)) or (((__t1750279240989 := self.compile_block(codeline + 1, indent)) and False or ((follow := __t1750279240989) and False)) or ((((__t1750279240989 := follow.code) and False or ((exp := __t1750279240989) and False) if exp is None else (__t1750279240989 := f'({exp}) or ({follow.code})') and False or ((exp := __t1750279240989) and False)) and False if follow.code is not None else None) and False or ((__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, jsd(next=follow.next, code=exp))) and False)))) if line.startswith('raise ') else ((__t1750279240989 := self.compile_block(codeline + 1, indent, class_body=class_body)) and False or ((follow := __t1750279240989) and False)) or (((__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, jsd(next=follow.next, dict=follow.dict))) and False if class_body else ((__t1750279240989 := f'{follow.code}') and False or ((exp := __t1750279240989) and False) if follow.code is not None else (__t1750279240989 := 'False') and False or ((exp := __t1750279240989) and False)) and False or ((__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, jsd(next=follow.next, code=exp))) and False)) and False) if line.strip() == 'pass' else ((__t1750279240989 := self.sc.compile(line)) and False or ((exp := __t1750279240989) and False)) or (((__t1750279240989 := self.compile_block(codeline + 1, indent)) and False or ((follow := __t1750279240989) and False)) or ((((__t1750279240989 := follow.code) and False or ((exp := __t1750279240989) and False) if exp is None else (__t1750279240989 := f'({exp}) or ({follow.code})') and False or ((exp := __t1750279240989) and False)) and False if follow.code is not None else None) and False or ((__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, jsd(next=follow.next, code=exp))) and False)))) and False))))), __ONE_var_realfunction(*args, **kvargs), getattr(__ONE_var_realfunction, '__ONE_var_retval', None)][-1]})) and False or (((__t1750279240989 := type('__ONE_trash', (dict,), {'__getattribute__': lambda s, x: s[x]})(globals().copy())) and False or ((block_compiler := __t1750279240989) and False)) or ((tokenize := __ONE_lib_importlib.import_module('tokenize')) and False or ((ast := __ONE_lib_importlib.import_module('ast')) and False or ((io := __ONE_lib_importlib.import_module('io')) and False or ((Preprocessor := type('Preprocessor', (code_provider.CodeProvider,), {'__init__': lambda *args, **kvargs: [(__ONE_var_realfunction := __ONE_sync_try()(lambda self: ... and False)), __ONE_var_realfunction(*args, **kvargs), getattr(__ONE_var_realfunction, '__ONE_var_retval', None)][-1], 'normalize': lambda *args, **kvargs: [(__ONE_var_realfunction := __ONE_sync_try()(lambda self, code: ((__t1750279240989 := ast.parse(code)) and False or ((tree := __t1750279240989) and False)) or (any((((node.body.pop(0) and False if node.body and isinstance(node.body[0], ast.Expr) and isinstance(node.body[0].value, ast.Constant) and isinstance(node.body[0].value.value, str) else None) and False if isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef, ast.ClassDef, ast.Module)) and ast.get_docstring(node, clean=False) is not None else None) and False for node in ast.walk(tree))) or ((__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, ast.unparse(tree))) and False)))), __ONE_var_realfunction(*args, **kvargs), getattr(__ONE_var_realfunction, '__ONE_var_retval', None)][-1]})) and False or (((__t1750279240989 := type('__ONE_trash', (dict,), {'__getattribute__': lambda s, x: s[x]})(globals().copy())) and False or ((preprocessor := __t1750279240989) and False)) or ((random := __ONE_lib_importlib.import_module('random')) and False or ((tokenize := __ONE_lib_importlib.import_module('tokenize')) and False or ((time := __ONE_lib_importlib.import_module('time')) and False or ((ast := __ONE_lib_importlib.import_module('ast')) and False or ((io := __ONE_lib_importlib.import_module('io')) and False or ((Compiler := type('Compiler', (), {'__init__': lambda *args, **kvargs: [(__ONE_var_realfunction := __ONE_sync_try()(lambda self, preprocessor, block_compiler: ((__t1750279240989 := preprocessor) and False or (setattr(self, 'p', __t1750279240989) and False)) or ((__t1750279240989 := block_compiler) and False or (setattr(self, 'b', __t1750279240989) and False)))), __ONE_var_realfunction(*args, **kvargs), getattr(__ONE_var_realfunction, '__ONE_var_retval', None)][-1], 'compile': lambda *args, **kvargs: [(__ONE_var_realfunction := __ONE_sync_try()(lambda self, filename, code: ((__t1750279240989 := self.p.normalize(code)) and False or ((code := __t1750279240989) and False)) or (((__t1750279240989 := self.b.build(filename, code)) and False or ((result := __t1750279240989) and False)) or (((__ONE_trash for __ONE_trash in '_').throw(CompilationError(f'{filename}:{result.next}:0: Empty resulting code.')) and False if result.code == None else None) and False or (((__t1750279240989 := self._collect_headers()) and False or (((__t1750279240989_i := iter(__t1750279240989)) and False or (((imports := next(__t1750279240989_i)) and False) and False)) or (((headers := next(__t1750279240989_i)) and False) and False))) or (((__t1750279240989 := result.code) and False or ((program := __t1750279240989) and False)) or (any(((__t1750279240989 := f'(({header}) and False) or ({program})') and False or ((program := __t1750279240989) and False) for header in headers)) or (any(((__t1750279240989 := f'((__ONE_lib_{lib} := __import__({repr(lib)})) and False) or ({program})') and False or ((program := __t1750279240989) and False) for lib in imports)) or (((__t1750279240989 := self.p.normalize(program)) and False or ((program := __t1750279240989) and False)) or ((__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, program)) and False)))))))))), __ONE_var_realfunction(*args, **kvargs), getattr(__ONE_var_realfunction, '__ONE_var_retval', None)][-1], '_collect_headers': lambda *args, **kvargs: [(__ONE_var_realfunction := __ONE_sync_try()(lambda self: ((__t1750279240989 := [self.p, self.b]) and False or ((components := __t1750279240989) and False)) or (((__t1750279240989 := ([], [])) and False or (((__t1750279240989_i := iter(__t1750279240989)) and False or (((inc := next(__t1750279240989_i)) and False) and False)) or (((head := next(__t1750279240989_i)) and False) and False))) or (any((inc.extend(obj.custom_imports()) and False or (head.extend(obj.custom_header()) and False) for obj in components)) or (((__t1750279240989 := [*set(inc)]) and False or ((inc := __t1750279240989) and False)) or ((__ONE_trash for __ONE_trash in '_').throw(__ONE_cls_ReturnObject(__ONE_var_realfunction, (inc, head))) and False)))))), __ONE_var_realfunction(*args, **kvargs), getattr(__ONE_var_realfunction, '__ONE_var_retval', None)][-1]})) and False or (((__t1750279240989 := type('__ONE_trash', (dict,), {'__getattribute__': lambda s, x: s[x]})(globals().copy())) and False or ((compiler := __t1750279240989) and False)) or ('\n    Main compiler file\n' and False or ((sys := __ONE_lib_importlib.import_module('sys')) and False or ((((__t1750279240989 := sys.argv[1:]) and False or ((args := __t1750279240989) and False)) or (((__t1750279240989 := (args[args.index('-o') + 1] if '-o' in args else './res.py')) and False or ((dest := __t1750279240989) and False)) or (((__t1750279240989 := [*map(lambda x: x[1], filter(lambda i: i[1] != '-o' and (i[0] == 0 or args[i[0] - 1] != '-o'), enumerate(args)))]) and False or ((files := __t1750279240989) and False)) or (print('Compile:') and False or (print(f'    destination: {dest}') and False or (print(f"    files:       {'; '.join(files)}") and False or ((print('No input files.') and False or (exit(1) and False) if len(files) == 0 else None) and False or ((print('Not implemented compilation of multiple files') and False or (exit(1) and False) if len(files) > 1 else None) and False or (print('Compilation started...') and False or (any((print(f'Compiling {name}...') and False or ((([((file := open(name, 'r')), file.__enter__())].__len__() == 0 or ((__t1750279240989 := file.read()) and False or ((content := __t1750279240989) and False))) or [file.__exit__(None, None, None)].__len__() == 0) or (((__t1750279240989 := preprocessor.Preprocessor()) and False or ((p := __t1750279240989) and False)) or (((__t1750279240989 := block_compiler.BlockCompiler(statement_compiler=statement_compiler.StatementCompiler())) and False or ((b := __t1750279240989) and False)) or (((__t1750279240989 := compiler.Compiler(preprocessor=p, block_compiler=b)) and False or ((c := __t1750279240989) and False)) or (((__t1750279240989 := c.compile(name, content)) and False or ((code := __t1750279240989) and False)) or ((print('Compilation returned Null') and False if code is None else ([((file := open(dest, 'w')), file.__enter__())].__len__() == 0 or (file.write(code) and False)) or [file.__exit__(None, None, None)].__len__() == 0) and False)))))) for name in files)) or (print('Compilation end.') and False)))))))))) if __name__ == '__main__' else None) and False or ((__t1750279240989 := type('__ONE_trash', (dict,), {'__getattribute__': lambda s, x: s[x]})(globals().copy())) and False or ((one := __t1750279240989) and False)))))))))))))))))))))))))))))))))))))))))))))